#include <iostream>
#include <chrono>

#include "../../src/circuit/circuit.hpp"

const std::string r = "21888242871839275222246405745257275088548364400416034343698204186575808495617";
const std::string q = "21888242871839275222246405745257275088696311157297823662689037894645226208583";
const std::string r_hex = "30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001";
const std::string q_hex = "30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47";

template<typename T>
void info(T& x){
    std::cout << x << std::endl;
}


int main(int, char** argv)
{
    std::string fname = argv[1];
    fname = "../strict.json";

    nlohmann::json circuit_info = open(fname);
    //CircuitSchema circuit_info = unpack(fname);
    
    Solver s(r, true, 10);
    Circuit circuit(circuit_info, &s);
//
//    auto start = std::chrono::high_resolution_clock::now();
//    bool res = s.check();
//    auto stop = std::chrono::high_resolution_clock::now();
//    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(stop - start);
//    std::cout << "Time elapsed: " << static_cast<double>(duration.count()) / 1e6 << " sec" << std::endl;
//    std::cout << "Gates: " << circuit.get_num_gates() << std::endl;
//    std::cout << "Result: " << s.getResult() << std::endl;
//
//    if (res) {
//        info("Vars of interest: ");
//        for (auto x : vars_of_interest) {
//            std::cout << x << " = " << s.getValue(vars[x.first]).getFiniteFieldValue() << std::endl;
//        }
//        info("Result of a computation: ");
//        std::cout << "ev = " << s.getValue(ev) << std::endl;
//    }

}
