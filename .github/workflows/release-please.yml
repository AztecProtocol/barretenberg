on:
  push:
    branches:
      - master

permissions:
  contents: write
  pull-requests: write

name: release-please

jobs:
  release-please:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Run Release Please
        id: release
        uses: google-github-actions/release-please-action@v3
        with:
          release-type: simple
          package-name: barretenberg
          bump-minor-pre-major: true
          bump-patch-for-minor-pre-major: true
          prerelease: true # Marks GitHub Releases for 0.x.x versions as "Pre-release"
          pull-request-title-pattern: "chore(barretenberg): Release ${version}"
          extra-files: |
            cpp/CMakeLists.txt
            VERSION
            barretenberg.nix
            barretenberg-wasm.nix

  build-linux:
    name: Build on Ubuntu
    needs: [release-please]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Bleeding edge CMake
        run: |
              sudo apt -y remove --purge cmake
              sudo snap install cmake --classic
      - name: Install Yarn
        run: |
          curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
          echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
          sudo apt -y update && sudo apt -y install yarn
      - name: Install Clang/Ninja/Binaryen
        run: |
          sudo apt-get -y install clang clang-format ninja-build binaryen
      - name: Install WASI-SDK
        run: |
          cd cpp
          ./scripts/install-wasi-sdk.sh
      - name: Compile Barretenberg
        run: |
          cd cpp
          cmake --preset default -DCMAKE_BUILD_TYPE=RelWithAssert -DOMP_MULTITHREADING=OFF
          cmake --build --preset default ${@/#/--target }
      - name: Compile Barretenberg.js
        run: |
          cd ts
          yarn && yarn build
      - name: Tar Typescript `dest` folder
        run: tar -cvf dest.tar ts/dest
      - name: Tar Native static `lib` folder
        run: tar -cvf ubuntu-static-lib.tar cpp/build/lib
      - name: Tar WASM static `lib` folder
        run: tar -cvf wasm-static-lib.tar cpp/build-wasm/lib
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-linux-wasm
          path: |
            cpp/build-wasm/bin/barretenberg.wasm
            dest.tar
            ubuntu-static-lib.tar
            wasm-static-lib.tar
          
  build-mac:
    name: Build on Mac
    needs: [release-please]
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Create Mac Build Environment
        run: |
          brew install cmake llvm ninja libomp clang-format
      - name: Configure Brew prefix
        run: echo "BREW_PREFIX=$(brew --prefix)" >> $GITHUB_ENV
      - name: Compile Barretenberg
        run: |
          cd cpp
          cmake --preset default -DCMAKE_BUILD_TYPE=RelWithAssert -DOMP_MULTITHREADING=OFF
          cmake --build --preset default ${@/#/--target }
      - name: Tar native static `lib` folder
        run: tar -cvf macos-static-lib.tar cpp/build/lib
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-mac
          path: macos-static-lib.tar

  release:
    name: Publish
    needs: [build-linux, build-mac, release-please]
    runs-on: ubuntu-large2
    steps:
      - name: Download files from Linux Runner
        uses: actions/download-artifact@v2
        with:
          name: release-linux-wasm
      - name: Download files from Mac Runner
        uses: actions/download-artifact@v2
        with:
          name: release-mac
      - name: Publish to GitHub
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          files: |
            ./cpp/build-wasm/bin/barretenberg.wasm
            dest.tar
            ubuntu-static-lib.tar
            wasm-static-lib.tar
            macos-static-lib.tar
