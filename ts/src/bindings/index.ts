// WARNING: FILE CODE GENERATED BY BINDGEN UTILITY. DO NOT EDIT!
/* eslint-disable @typescript-eslint/no-unused-vars */
import { callWasmExport } from "../call_wasm_export/index.js";
import { BufferDeserializer, NumberDeserializer, VectorDeserializer } from "../serialize/index.js";
import { Fr } from "../types/index.js";
export function pedersenInit() {
    const inArgs: Array<any> = [];
    const outTypes: Array<any> = [];
    const result = callWasmExport("pedersen__init", inArgs, outTypes);
    return;
}
export function pedersenCompressFields(left: Fr, right: Fr): Fr {
    const inArgs = [left, right];
    const outTypes = [Fr];
    const result = callWasmExport("pedersen__compress_fields", inArgs, outTypes);
    return result[0];
}
export function pedersenPlookupCompressFields(left: Fr, right: Fr): Fr {
    const inArgs = [left, right];
    const outTypes = [Fr];
    const result = callWasmExport("pedersen_plookup_compress_fields", inArgs, outTypes);
    return result[0];
}
export function pedersenCompress(inputsBuffer: Fr[]): Fr {
    const inArgs = [inputsBuffer];
    const outTypes = [Fr];
    const result = callWasmExport("pedersen__compress", inArgs, outTypes);
    return result[0];
}
export function pedersenPlookupCompress(inputsBuffer: Fr[]): Fr {
    const inArgs = [inputsBuffer];
    const outTypes = [Fr];
    const result = callWasmExport("pedersen_plookup_compress", inArgs, outTypes);
    return result[0];
}
export function pedersenCompressWithHashIndex(inputsBuffer: Fr[], hashIndex: number): Fr {
    const inArgs = [inputsBuffer, hashIndex];
    const outTypes = [Fr];
    const result = callWasmExport("pedersen__compress_with_hash_index", inArgs, outTypes);
    return result[0];
}
export function pedersenCommit(inputsBuffer: Fr[]): Fr {
    const inArgs = [inputsBuffer];
    const outTypes = [Fr];
    const result = callWasmExport("pedersen__commit", inArgs, outTypes);
    return result[0];
}
export function pedersenPlookupCommit(inputsBuffer: Fr[]): Fr {
    const inArgs = [inputsBuffer];
    const outTypes = [Fr];
    const result = callWasmExport("pedersen_plookup_commit", inArgs, outTypes);
    return result[0];
}
export function pedersenBufferToField(data: Buffer): Fr {
    const inArgs = [data];
    const outTypes = [Fr];
    const result = callWasmExport("pedersen__buffer_to_field", inArgs, outTypes);
    return result[0];
}
export function pedersenHashInit() {
    const inArgs: Array<any> = [];
    const outTypes: Array<any> = [];
    const result = callWasmExport("pedersen_hash__init", inArgs, outTypes);
    return;
}
export function pedersenHashPair(left: Fr, right: Fr): Fr {
    const inArgs = [left, right];
    const outTypes = [Fr];
    const result = callWasmExport("pedersen__hash_pair", inArgs, outTypes);
    return result[0];
}
export function pedersenHashMultiple(inputsBuffer: Fr[]): Fr {
    const inArgs = [inputsBuffer];
    const outTypes = [Fr];
    const result = callWasmExport("pedersen__hash_multiple", inArgs, outTypes);
    return result[0];
}
export function pedersenHashMultipleWithHashIndex(inputsBuffer: Fr[], hashIndex: number): Fr {
    const inArgs = [inputsBuffer, hashIndex];
    const outTypes = [Fr];
    const result = callWasmExport("pedersen__hash_multiple_with_hash_index", inArgs, outTypes);
    return result[0];
}
export function pedersenHashToTree(data: Fr[]): Fr[] {
    const inArgs = [data];
    const outTypes = [VectorDeserializer(Fr)];
    const result = callWasmExport("pedersen__hash_to_tree", inArgs, outTypes);
    return result[0];
}

