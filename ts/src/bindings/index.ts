// WARNING: FILE CODE GENERATED BY BINDGEN UTILITY. DO NOT EDIT!
/* eslint-disable @typescript-eslint/no-unused-vars */
import { callWasmExport } from '../call_wasm_export/index.js';
import { BufferDeserializer, NumberDeserializer, VectorDeserializer, BoolDeserializer } from '../serialize/index.js';
import { Fr, Fq, Point, Buffer32, Buffer128 } from '../types/index.js';
export function pedersenInit() {
  const inArgs: Array<any> = [];
  const outTypes: Array<any> = [];
  const result = callWasmExport('pedersen__init', inArgs, outTypes);
  return;
}
export function pedersenCompressFields(left: Fr, right: Fr): Fr {
  const inArgs = [left, right];
  const outTypes = [Fr];
  const result = callWasmExport('pedersen__compress_fields', inArgs, outTypes);
  return result[0];
}
export function pedersenPlookupCompressFields(left: Fr, right: Fr): Fr {
  const inArgs = [left, right];
  const outTypes = [Fr];
  const result = callWasmExport('pedersen_plookup_compress_fields', inArgs, outTypes);
  return result[0];
}
export function pedersenCompress(inputsBuffer: Fr[]): Fr {
  const inArgs = [inputsBuffer];
  const outTypes = [Fr];
  const result = callWasmExport('pedersen__compress', inArgs, outTypes);
  return result[0];
}
export function pedersenPlookupCompress(inputsBuffer: Fr[]): Fr {
  const inArgs = [inputsBuffer];
  const outTypes = [Fr];
  const result = callWasmExport('pedersen_plookup_compress', inArgs, outTypes);
  return result[0];
}
export function pedersenCompressWithHashIndex(inputsBuffer: Fr[], hashIndex: number): Fr {
  const inArgs = [inputsBuffer, hashIndex];
  const outTypes = [Fr];
  const result = callWasmExport('pedersen__compress_with_hash_index', inArgs, outTypes);
  return result[0];
}
export function pedersenCommit(inputsBuffer: Fr[]): Fr {
  const inArgs = [inputsBuffer];
  const outTypes = [Fr];
  const result = callWasmExport('pedersen__commit', inArgs, outTypes);
  return result[0];
}
export function pedersenPlookupCommit(inputsBuffer: Fr[]): Fr {
  const inArgs = [inputsBuffer];
  const outTypes = [Fr];
  const result = callWasmExport('pedersen_plookup_commit', inArgs, outTypes);
  return result[0];
}
export function pedersenBufferToField(data: Buffer): Fr {
  const inArgs = [data];
  const outTypes = [Fr];
  const result = callWasmExport('pedersen__buffer_to_field', inArgs, outTypes);
  return result[0];
}
export function pedersenHashInit() {
  const inArgs: Array<any> = [];
  const outTypes: Array<any> = [];
  const result = callWasmExport('pedersen_hash__init', inArgs, outTypes);
  return;
}
export function pedersenHashPair(left: Fr, right: Fr): Fr {
  const inArgs = [left, right];
  const outTypes = [Fr];
  const result = callWasmExport('pedersen__hash_pair', inArgs, outTypes);
  return result[0];
}
export function pedersenHashMultiple(inputsBuffer: Fr[]): Fr {
  const inArgs = [inputsBuffer];
  const outTypes = [Fr];
  const result = callWasmExport('pedersen__hash_multiple', inArgs, outTypes);
  return result[0];
}
export function pedersenHashMultipleWithHashIndex(inputsBuffer: Fr[], hashIndex: number): Fr {
  const inArgs = [inputsBuffer, hashIndex];
  const outTypes = [Fr];
  const result = callWasmExport('pedersen__hash_multiple_with_hash_index', inArgs, outTypes);
  return result[0];
}
export function pedersenHashToTree(data: Fr[]): Fr[] {
  const inArgs = [data];
  const outTypes = [VectorDeserializer(Fr)];
  const result = callWasmExport('pedersen__hash_to_tree', inArgs, outTypes);
  return result[0];
}
export function blake2s(data: Buffer): Buffer32 {
  const inArgs = [data];
  const outTypes = [Buffer32];
  const result = callWasmExport('blake2s', inArgs, outTypes);
  return result[0];
}
export function blake2sToField(data: Buffer): Fr {
  const inArgs = [data];
  const outTypes = [Fr];
  const result = callWasmExport('blake2s_to_field', inArgs, outTypes);
  return result[0];
}
export function schnorrComputePublicKey(privateKey: Fr): Point {
  const inArgs = [privateKey];
  const outTypes = [Point];
  const result = callWasmExport('schnorr__compute_public_key', inArgs, outTypes);
  return result[0];
}
export function schnorrNegatePublicKey(publicKeyBuffer: Point): Point {
  const inArgs = [publicKeyBuffer];
  const outTypes = [Point];
  const result = callWasmExport('schnorr__negate_public_key', inArgs, outTypes);
  return result[0];
}
export function schnorrConstructSignature(message: Buffer, privateKey: Fr): [Buffer32, Buffer32] {
  const inArgs = [message, privateKey];
  const outTypes = [Buffer32, Buffer32];
  const result = callWasmExport('schnorr__construct_signature', inArgs, outTypes);
  return result as any;
}
export function schnorrVerifySignature(message: Buffer, pubKey: Point, sigS: Buffer32, sigE: Buffer32): boolean {
  const inArgs = [message, pubKey, sigS, sigE];
  const outTypes = [BoolDeserializer()];
  const result = callWasmExport('schnorr__verify_signature', inArgs, outTypes);
  return result[0];
}
export function schnorrMultisigCreateMultisigPublicKey(privateKey: Fq): Buffer128 {
  const inArgs = [privateKey];
  const outTypes = [Buffer128];
  const result = callWasmExport('schnorr__multisig_create_multisig_public_key', inArgs, outTypes);
  return result[0];
}
export function schnorrMultisigValidateAndCombineSignerPubkeys(signerPubkeyBuf: Buffer128[]): [Point, boolean] {
  const inArgs = [signerPubkeyBuf];
  const outTypes = [Point, BoolDeserializer()];
  const result = callWasmExport('schnorr__multisig_validate_and_combine_signer_pubkeys', inArgs, outTypes);
  return result as any;
}
export function schnorrMultisigConstructSignatureRound1(): [Buffer128, Buffer128] {
  const inArgs: Array<any> = [];
  const outTypes = [Buffer128, Buffer128];
  const result = callWasmExport('schnorr__multisig_construct_signature_round_1', inArgs, outTypes);
  return result as any;
}
export function schnorrMultisigConstructSignatureRound2(
  message: Buffer,
  privateKey: Fq,
  signerRoundOnePrivateBuf: Buffer128,
  signerPubkeysBuf: Buffer128[],
  roundOnePublicBuf: Buffer128[],
): [Fq, boolean] {
  const inArgs = [message, privateKey, signerRoundOnePrivateBuf, signerPubkeysBuf, roundOnePublicBuf];
  const outTypes = [Fq, BoolDeserializer()];
  const result = callWasmExport('schnorr__multisig_construct_signature_round_2', inArgs, outTypes);
  return result as any;
}
export function schnorrMultisigCombineSignatures(
  message: Buffer,
  signerPubkeysBuf: Buffer128[],
  roundOneBuf: Buffer128[],
  roundTwoBuf: Fr[],
): [Buffer32, Buffer32, boolean] {
  const inArgs = [message, signerPubkeysBuf, roundOneBuf, roundTwoBuf];
  const outTypes = [Buffer32, Buffer32, BoolDeserializer()];
  const result = callWasmExport('schnorr__multisig_combine_signatures', inArgs, outTypes);
  return result as any;
}
